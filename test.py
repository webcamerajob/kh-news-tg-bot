import os
import requests
from bs4 import BeautifulSoup
from googletrans import Translator
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
import asyncio

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (Secrets —á–µ—Ä–µ–∑ GitHub)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TELEGRAM_CHANNEL = os.getenv("TELEGRAM_CHANNEL")  # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
PUBLISHED_ARTICLES_FILE = "published_articles.txt"  # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
URL = "https://kmertimes/national"  # –°–∞–π—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–µ–π

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

def chunk_text(text, max_length=4096):
    """–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª–∏–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ max_length."""
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]

def fetch_articles():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 —Å—Ç–∞—Ç–µ–π —Å —Å–∞–π—Ç–∞."""
    response = requests.get(URL)
    response.raise_for_status()

    soup = BeautifulSoup(response.text, "html.parser")
    articles = soup.find_all("article", limit=10)  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π
    parsed_articles = []

    for article in articles:
        title = article.find("h2").text.strip() if article.find("h2") else None
        link = article.find("a")["href"] if article.find("a") else None
        if title and link:
            parsed_articles.append({"title": title, "link": link})

    return parsed_articles

def translate_to_russian(text):
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã."""
    translator = Translator()
    chunks = chunk_text(text, max_length=4096)
    translated_chunks = [translator.translate(chunk, src="en", dest="ru").text for chunk in chunks]
    return ''.join(translated_chunks)

def load_published_articles():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π."""
    if not os.path.exists(PUBLISHED_ARTICLES_FILE):
        return set()
    with open(PUBLISHED_ARTICLES_FILE, "r", encoding="utf-8") as file:
        return set(file.read().splitlines())

def save_published_articles(articles):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π."""
    with open(PUBLISHED_ARTICLES_FILE, "a", encoding="utf-8") as file:
        for article in articles:
            file.write(article + "\n")

async def send_articles_to_telegram(articles):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–µ–π –≤ Telegram."""
    for article in articles:
        text = f"üì¢ {article['title']}\n–°—Å—ã–ª–∫–∞: {article['link']}"
        await bot.send_message(TELEGRAM_CHANNEL, text)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞."""
    try:
        articles = fetch_articles()
        published_articles = load_published_articles()
        new_articles = []

        for article in articles:
            if article["link"] not in published_articles:
                article["title"] = translate_to_russian(article["title"])
                new_articles.append(article)

        if new_articles:
            await send_articles_to_telegram(new_articles)
            save_published_articles([article["link"] for article in new_articles])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

if name == "main":
    asyncio.run(main())
