import logging
import json
import traceback
import asyncio
import re
import io

from pathlib import Path
from datetime import datetime
from contextlib import ExitStack
from typing import List, Any

from telegram import Bot, InputMediaPhoto
from telegram.constants import ParseMode
from telegram.error import BadRequest, RetryAfter, TelegramError
from telegram.helpers import escape

from PIL import Image, ImageEnhance

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ======

# –°–ª–æ–≤–∞ (—Ä–µ–≥–∏—Å—Ç—Ä–æ–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ), –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤—ã—Ä–µ–∑–∞—Ç—å –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
EXCLUDE_WORDS = ["–°–∏–Ω–æ–ø—Å–∏—Å :", "–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", r"\(–≤–∏–¥–µ–æ\-)"]

# –ø–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å deep_translator
try:
    from deep_translator import GoogleTranslator
    DEEP_TRANSLATOR_AVAILABLE = True
except ImportError:
    logging.warning("deep_translator –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç–∫–ª—é—á—ë–Ω")
    DEEP_TRANSLATOR_AVAILABLE = False

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram & –ø—É—Ç–µ–π ======

import os
bot_token = os.getenv("TELEGRAM_TOKEN")
channel_id = os.getenv("TELEGRAM_CHANNEL")

if not bot_token or not channel_id:
    raise RuntimeError("üö´ TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHANNEL –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω!")

# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:
# bot.send_message(chat_id=channel_id, text="...")

CATALOG_PATH     = Path(__file__).parent / "articles" / "catalog.json"

MAX_MEDIA_CAPTION = 1024
MAX_TEXT_CHUNK    = 4096
MAX_MEDIA_FILES   = 10
POST_DELAY        = 300.0   # —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ ======

WATERMARK_PATH = Path(__file__).parent / "watermark.png"
WM_SCALE       = 0.45             # –¥–æ–ª—è —à–∏—Ä–∏–Ω—ã –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
WM_POSITION    = "top_right"  # top_left, top_right, bottom_left, bottom_right, center
WM_OPACITY     = 1.0             # 0.0‚Äì1.0

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ======

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler()]
)


# ====== Retry-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è FloodControl ======

async def safe_call(method: Any, *args, **kwargs) -> Any:
    """
    –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è API-–º–µ—Ç–æ–¥–æ–≤ Telegram:
    –ø—Ä–∏ RetryAfter –∂–¥—ë—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è + 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–ø–∞—Å–∞.
    """
    while True:
        try:
            return await method(*args, **kwargs)
        except RetryAfter as e:
            wait = e.retry_after + 1
            logging.warning("‚ö†Ô∏è Flood control: –∂–¥—É %d —Å–µ–∫.", wait)
            await asyncio.sleep(wait)
        except TelegramError:
            raise


# ====== I/O –∫–∞—Ç–∞–ª–æ–≥–∞ ======

def load_catalog() -> List[dict]:
    if not CATALOG_PATH.exists():
        logging.error("üõë catalog.json –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", CATALOG_PATH)
        return []
    try:
        return json.loads(CATALOG_PATH.read_text("utf-8"))
    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è catalog.json: %s\n%s", e, traceback.format_exc())
        return []

def save_catalog(catalog: List[dict]):
    try:
        CATALOG_PATH.write_text(json.dumps(catalog, ensure_ascii=False, indent=2), "utf-8")
        logging.debug("üíæ catalog.json —Å–æ—Ö—Ä–∞–Ω—ë–Ω")
    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è catalog.json: %s\n%s", e, traceback.format_exc())


# ====== –£—Ç–∏–ª–∏—Ç—ã —Ç–µ–∫—Å—Ç–∞ ======

def filter_text(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ EXCLUDE_WORDS,
    —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.
    """
    for w in EXCLUDE_WORDS:
        pattern = rf"\b{re.escape(w)}\b"
        text = re.sub(pattern, "", text, flags=re.IGNORECASE)
    text = re.sub(r"[ \t]{2,}", " ", text)
    text = re.sub(r"\n{3,}", "\n\n", text)
    return text.strip()

def split_text_by_words(
    content: str,
    prefix: str,
    first_len: int = 1024,
    rest_len: int = 4096
) -> List[str]:
    """
    content ‚Äî –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    prefix ‚Äî –ø—Ä–µ—Ñ–∏–∫—Å –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
    first_len ‚Äî –º–∞–∫—Å –¥–ª–∏–Ω–∞ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ (–≤–∫–ª—é—á–∞—è prefix)
    rest_len ‚Äî –º–∞–∫—Å –¥–ª–∏–Ω–∞ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —á–∞—Å—Ç–µ–π
    """
    parts: List[str] = []
    text = content

    # 1) –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å
    avail = first_len - len(prefix)
    if len(text) <= avail:
        parts.append(prefix + text)
        return parts

    # –æ—Ç—Ä–µ–∑–∞–µ–º –º–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ, –Ω–æ –Ω–µ —Ä–∞–∑—Ä—ã–≤–∞–µ–º —Å–ª–æ–≤–æ
    chunk = text[:avail]
    cut = chunk.rfind(" ")
    if cut > 0:
        parts.append(prefix + chunk[:cut])
        text = text[cut:].lstrip()
    else:
        parts.append(prefix + chunk)
        text = text[avail:].lstrip()

    # 2) –≤—Å–µ —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Å—Ç–∏
    while text:
        if len(text) <= rest_len:
            parts.append(text)
            break

        chunk = text[:rest_len]
        cut = chunk.rfind(" ")
        if cut > 0:
            parts.append(chunk[:cut])
            text = text[cut:].lstrip()
        else:
            parts.append(chunk)
            text = text[rest_len:].lstrip()

    return parts

async def translate_to_ru(text: str) -> str:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ deep_translator –≤ executor,
    —Ä–∞–∑–±–∏–≤–∞–µ—Ç –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ 2000 —Å–∏–º–≤–æ–ª–æ–≤.
    """
    if not DEEP_TRANSLATOR_AVAILABLE:
        return text

    def _sync_translate(t: str) -> str:
        try:
            result = []
            idx = 0
            while idx < len(t):
                end = min(len(t), idx + 2000)
                segment = t[idx:end]
                if end < len(t):
                    cut = segment.rfind(" ")
                    if cut > 0:
                        segment, end = segment[:cut], idx + cut
                res = GoogleTranslator(source="auto", target="ru").translate(segment)
                result.append(res)
                idx = end
            return "".join(result)
        except Exception as e:
            logging.warning("–ü–µ—Ä–µ–≤–æ–¥ —É–ø–∞–ª: %s", e)
            return text

    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, _sync_translate, text)


# ====== –ù–∞–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ ======

def apply_watermark(
        img_path: Path,
        watermark_path: Path,
        scale: float,
        position: str,
        opacity: float
    ) -> io.BytesIO:
    base = Image.open(img_path).convert("RGBA")
    wm   = Image.open(watermark_path).convert("RGBA")

    # —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥-—Ñ–∏–ª—å—Ç—Ä
    try:
        resample = Image.Resampling.LANCZOS
    except AttributeError:
        resample = Image.LANCZOS

    wm_w = int(base.width * scale)
    wm_h = int(wm.height * (wm_w / wm.width))
    wm   = wm.resize((wm_w, wm_h), resample=resample)

    # –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    if position == "center":
        xy = ((base.width - wm_w)//2, (base.height - wm_h)//2)
    elif position == "top_left":
        xy = (0, 0)
    elif position == "top_right":
        xy = (base.width - wm_w, 0)
    elif position == "bottom_left":
        xy = (0, base.height - wm_h)
    else:  # bottom_right
        xy = (base.width - wm_w, base.height - wm_h)

    # –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    alpha = wm.split()[3]
    alpha = ImageEnhance.Brightness(alpha).enhance(opacity)
    wm.putalpha(alpha)

    # –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–∏
    layer  = Image.new("RGBA", base.size)
    layer.paste(wm, xy, wm)
    merged = Image.alpha_composite(base, layer).convert("RGB")

    bio = io.BytesIO()
    merged.save(bio, format="JPEG", quality=90)
    bio.seek(0)
    return bio


# ====== –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—å–∏ ======

async def send_article(bot: Bot, article: dict) -> bool:
    art_id = article.get("id")
    if article.get("posted"):
        logging.info("‚è© %s —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞", art_id)
        return False

    text_file = article.get("text_file")
    if not text_file or not Path(text_file).exists():
        logging.error("‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", text_file)
        return False

    raw = Path(text_file).read_text("utf-8")
    txt = re.sub(r'\r\n', '\n', raw)
    txt = re.sub(r'\n{3,}', '\n\n', txt).strip()

    # –ø–µ—Ä–µ–≤–æ–¥ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
    title_raw = article.get("title", "").strip()
    title_tr  = await translate_to_ru(title_raw)
    title_tr  = filter_text(title_tr)

    # –ø–µ—Ä–µ–≤–æ–¥ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    txt_tr    = await translate_to_ru(txt)
    txt_tr    = filter_text(txt_tr)

    # –≥–æ—Ç–æ–≤–∏–º –ø—Ä–µ—Ñ–∏–∫—Å
    prefix = f"<b>{escape(title_tr)}</b>\n\n"

    # —Ä–∞–∑–±–∏–≤–∞–µ–º –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    parts     = split_text_by_words(txt_tr, prefix, MAX_MEDIA_CAPTION)
    text_rest = parts[1:] if len(parts) > 1 else []

    # –∫–∞—Ä—Ç–∏–Ω–∫–∏
    imgs  = article.get("images", [])[:MAX_MEDIA_FILES]
    valid = [p for p in imgs if Path(p).exists()]

    try:
        # 1) media_group —Å caption –Ω–∞ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ
        if valid:
            with ExitStack() as st:
                media = []
                for idx, img in enumerate(valid):
                    wm_bio = apply_watermark(img, WATERMARK_PATH,
                                              WM_SCALE, WM_POSITION, WM_OPACITY)
                    media.append(InputMediaPhoto(
                        media=wm_bio,
                        caption=parts[0] if idx == 0 else None,
                        parse_mode=ParseMode.HTML if idx == 0 else None
                    ))
                await safe_call(bot.send_media_group,
                                chat_id=channel_id,
                                media=media)
            logging.info("‚úÖ media_group –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: %s", art_id)
        else:
            # –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await safe_call(bot.send_message,
                            chat_id=channel_id,
                            text=parts[0],
                            parse_mode=ParseMode.HTML)
            logging.info("‚úÖ Caption-—Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: %s", art_id)


        # 2) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—Ç–∏
        for idx, frag in enumerate(text_rest, start=1):
            await safe_call(bot.send_message,
                            chat_id=channel_id,
                            text=frag,
                            parse_mode=ParseMode.HTML)
            logging.debug("‚û°Ô∏è –ß–∞—Å—Ç—å %d/%d –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: %s", idx, len(text_rest), art_id)

    except BadRequest as e:
        logging.error("‚ùå BadRequest –¥–ª—è %s: %s", art_id, e)
        return False
    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ %s: %s\n%s",
                      art_id, e, traceback.format_exc())
        return False

    # –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
    meta = Path(text_file).parent / "meta.json"
    if meta.exists():
        try:
            m = json.loads(meta.read_text("utf-8"))
            m["posted"]    = True
            m["posted_at"] = datetime.now().isoformat()
            meta.write_text(json.dumps(m, ensure_ascii=False, indent=2), "utf-8")
        except Exception:
            pass

    article["posted"] = True
    return True


# ====== Entry point ======

async def main():
    try:
        bot = Bot(token=bot_token)
    except Exception as e:
        logging.error("üö´ Bot init error: %s", e)
        return

    catalog = load_catalog()
    if not catalog:
        logging.error("üõë –ù–µ—á–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å")
        return

    sent = 0
    for art in catalog:
        result = await send_article(bot, art)
        if result:
            sent += 1
        logging.debug("‚è≥ –ñ–¥—É %d —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞—Ç—å–µ–π", POST_DELAY)
        await asyncio.sleep(POST_DELAY)  # ‚¨Ö –≤–æ—Ç –∑–¥–µ—Å—å –ø–∞—É–∑–∞
            
    save_catalog(catalog)
    logging.info("üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –∏–∑ %d —Å—Ç–∞—Ç–µ–π", sent, len(catalog))

if __name__ == "__main__":
    asyncio.run(main())
