name: Parse and Post

on:
  schedule:
    - cron: '0 22 * * *'   # 05:00 ICT (UTC+7)
    - cron: '0 1,4,7,10 * * *' # 08:00, 11:00, 14:00, 17:00 ICT (UTC+7)
  workflow_dispatch:

concurrency:
  group: parse-and-post-national
  cancel-in-progress: true

jobs:
  parse:
    name: 🔍 Parse Articles
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      WG_CONFIG:      ${{ secrets.WG_CONFIG }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}

    steps:
      - name: 🔄 Checkout repo
        uses: actions/checkout@v4

      - name: 📦 Cache parser dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-parser-${{ hashFiles('requirements-parser.txt') }}

      - name: 🔧 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 💾 Install parser dependencies
        run: pip install -r requirements-parser.txt

      - name: 🛠 Ensure articles/ exists
        run: mkdir -p articles

      - name: 🔐 WireGuard VPN setup
        run: |
          sudo apt-get update && sudo apt-get install -y wireguard-tools resolvconf jq curl
          mkdir -p $HOME/wg
          echo "${WG_CONFIG}" > $HOME/wg/wg0.conf
          chmod 600 $HOME/wg/wg0.conf
          sudo wg-quick up $HOME/wg/wg0.conf
          echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf

      - name: 🧠 Run Parser
        run: python3 parser.py --base-url https://www.khmertimeskh.com --slug national --lang ru

      - name: 🛑 Teardown WireGuard
        if: always()
        run: sudo wg-quick down $HOME/wg/wg0.conf || true

      - name: ✅ Validate catalog.json
        run: |
          if [ ! -f "articles/catalog.json" ]; then
            echo "❌ catalog.json missing"
            exit 1
          fi
          jq empty articles/catalog.json

      - name: 📦 Upload parsed content
        uses: actions/upload-artifact@v4
        with:
          name: parsed-content
          path: articles/

      - name: 🚨 Notify parse failure
        if: failure()
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ env.TELEGRAM_CHANNEL }}" \
            -d text="❌ Parsing failed for run ${{ github.run_id }}"

  post:
    name: 📤 Post to Telegram
    needs: parse
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}
      BATCH_LIMIT: 10
      POST_DELAY: 45

    steps:
      - name: 🔄 Checkout poster
        uses: actions/checkout@v4

      - name: 📦 Cache poster dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-poster-${{ hashFiles('requirements-poster.txt') }}

      - name: 🔧 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 💾 Install poster dependencies
        run: pip install -r requirements-poster.txt

      - name: 📥 Download parsed content
        uses: actions/download-artifact@v4
        with:
          name: parsed-content
          path: articles/

      - name: 📁 Validate catalog.json
        run: |
          if [ ! -f "articles/catalog.json" ]; then
            echo "⚠️ catalog.json missing — skipping post"
            exit 0
          fi
          jq empty articles/catalog.json

      - name: 📤 Run Poster
        run: python3 poster.py --limit ${{ env.BATCH_LIMIT }}

      - name: 📝 Reupload catalog after posting
        uses: actions/upload-artifact@v4
        with:
          name: catalog-after-${{ github.run_id }}
          path: articles/catalog.json

      - name: 🚨 Notify post failure
        if: failure()
        run: |
          curl -s -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ env.TELEGRAM_CHANNEL }}" \
            -d text="❌ Post failed for run ${{ github.run_id }}"
