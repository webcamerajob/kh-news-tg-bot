name: Parse & Post Articles
concurrency:
  group: post-articles
  cancel-in-progress: false
  
permissions:
  contents: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '30 22-23 * * *'
    - cron: '30 0-11 * * *'
    
env:
  POST_DELAY: 10
  BATCH_LIMIT: 5

jobs:
  parse:
    name: –ü–∞—Ä—Å–∏–Ω–≥ ‚Üí –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (WireGuard)
    runs-on: ubuntu-latest
    outputs:
      new_articles_found: ${{ steps.parse_step.outputs.new_articles_found }}
    env:
      WG_CONFIG: ${{ secrets.WG_CONFIG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-parser.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install parser requirements
        run: |
          if [ -f requirements-parser.txt ]; then
            pip install -r requirements-parser.txt
          fi

      - name: üîê Setup WireGuard & install jq
        run: |
          sudo apt-get update \
            && sudo apt-get install -y wireguard-tools resolvconf jq
          mkdir -p $HOME/wg
          echo "$WG_CONFIG" > $HOME/wg/wg0.conf
          chmod 600 $HOME/wg/wg0.conf
          sudo wg-quick up $HOME/wg/wg0.conf
          echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf
  
      - name: Run parser
        id: parse_step
        run: |
          echo "‚Üí STARTING PARSER RUN"
          # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ (parser.py) –∑–¥–µ—Å—å –≤–µ—Ä–Ω–æ–µ
          python3 parser.py \
            --lang 'ru' \
            --limit ${{ env.BATCH_LIMIT_PARSE || 10 }} \
            --posted-state-file articles/posted.json | tee parser_output.txt

          echo "‚Üí PARSER RUN COMPLETE"
          
          # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ –≤—ã—Ö–æ–¥ —à–∞–≥–∞
          NEW_ARTICLES_STATUS=$(grep "NEW_ARTICLES_STATUS:" parser_output.txt | cut -d: -f2 | tr -d '[:space:]')
          echo "new_articles_found=$NEW_ARTICLES_STATUS" >> $GITHUB_OUTPUT
          echo "Extracted new_articles_found status: '$NEW_ARTICLES_STATUS'"

      - name: üõë Teardown WireGuard
        if: always()
        run: sudo wg-quick down $HOME/wg/wg0.conf || true

      - name: Upload parsed-content
        uses: actions/upload-artifact@v4
        with:
          name: parsed-content
          path: articles/

  post:
    name: Publish new articles
    needs: parse
    runs-on: ubuntu-latest
    # –ó–∞–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç job, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –Ω–∞—à–µ–ª –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
    if: needs.parse.outputs.new_articles_found == 'true'
    env:
      TELEGRAM_TOKEN:   ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python for poster
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install poster requirements
        run: |
          if [ -f requirements-poster.txt ]; then
            pip install -r requirements-poster.txt
          fi

      - name: Download parsed-content
        uses: actions/download-artifact@v4
        with:
          name: parsed-content
          path: parsed_articles

      # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–º–µ—â–∞–µ–º catalog.json –≤ –Ω—É–∂–Ω—É—é –ø–∞–ø–∫—É ---
      - name: Move catalog.json to the correct path
        run: |
          # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É articles, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
          mkdir -p articles
          # –ü–µ—Ä–µ–º–µ—â–∞–µ–º catalog.json –∏–∑ –ø–∞–ø–∫–∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ —Ä–∞–±–æ—á—É—é –ø–∞–ø–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
          mv parsed_articles/catalog.json articles/catalog.json
      
      - name: Run poster
        run: |
          echo "‚Üí Running poster against parsed_articles"
          python3 poster.py \
            --parsed-dir parsed_articles \
            --state-file articles/posted.json \
            --limit $BATCH_LIMIT

      - name: Commit updated data files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –û–ë–ê —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
          git add articles/posted.json articles/catalog.json

          if ! git diff --cached --quiet; then
            git commit -m "chore: update data files (posted, catalog)"
            git pull --rebase origin main
            git push
          else
            echo "‚úÖ Data files (posted.json, catalog.json) unchanged"
          fi
