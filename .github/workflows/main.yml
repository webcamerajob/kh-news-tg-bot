name: Parse & Post Articles
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
  
permissions:
  contents: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '30 22-23 * * *'
    - cron: '30 0-11 * * *'
    
env:
  POST_DELAY: 10
  BATCH_LIMIT: 15

jobs:
  build-and-publish:
    name: Parse and Publish
    runs-on: ubuntu-latest
    
    env:
      TELEGRAM_TOKEN:   ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}
      # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω—É–∂–µ–Ω VPN, –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–µ–∫—Ä–µ—Ç
      # WG_CONFIG: ${{ secrets.WG_CONFIG_KHMERTIMES }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install requirements
        run: |
          if [ -f requirements-parser.txt ]; then
            pip install -r requirements-parser.txt
          fi
          if [ -f requirements-poster.txt ]; then
            pip install -r requirements-poster.txt
          fi
      
      # –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –Ω—É–∂–µ–Ω VPN, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫
      # - name: üîê Setup WireGuard
      #   run: |
      #     sudo apt-get update && sudo apt-get install -y wireguard-tools
      #     echo "$WG_CONFIG" | sudo tee /etc/wireguard/wg0.conf > /dev/null
      #     sudo wg-quick up wg0

      - name: Run parser
        id: parse_step
        run: |
          echo "‚Üí STARTING PARSER RUN"
          # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, main.py) –≤–µ—Ä–Ω–æ–µ
          python3 main.py \
            --lang 'ru' \
            --limit ${{ env.BATCH_LIMIT_PARSE || 15 }} \
            --posted-state-file articles/posted.json | tee parser_output.txt
          echo "‚Üí PARSER RUN COMPLETE"
          
          NEW_ARTICLES_STATUS=$(grep "NEW_ARTICLES_STATUS:" parser_output.txt | cut -d: -f2 | tr -d '[:space:]')
          echo "new_articles_found=$NEW_ARTICLES_STATUS" >> $GITHUB_OUTPUT
          echo "Extracted new_articles_found status: '$NEW_ARTICLES_STATUS'"
      
      # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ VPN, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫ –¥–ª—è –µ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
      # - name: üõë Teardown WireGuard
      #   if: always()
      #   run: sudo wg-quick down wg0 || true

      - name: Run poster
        if: steps.parse_step.outputs.new_articles_found == 'true'
        run: |
          echo "‚Üí Running poster..."
          python3 poster.py \
            --parsed-dir articles \
            --state-file articles/posted.json \
            --limit $BATCH_LIMIT

      - name: Commit updated data files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∂—É—Ä–Ω–∞–ª –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π. –ö—ç—à catalog.json –Ω–µ –∫–æ–º–º–∏—Ç–∏–º.
          if [ -f "articles/posted.json" ]; then
            git add articles/posted.json
          fi

          if ! git diff --cached --quiet; then
            git commit -m "chore: update posted.json"
            git pull --rebase origin main
            git push
          else
            echo "‚úÖ posted.json unchanged"
          fi
