name: Parse & Post Articles
permissions:
  contents: write
on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  POST_DELAY: 5
  BATCH_LIMIT: 50
  PYTHON_VERSION: "3.10"  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è Python

jobs:
  parse:
    name: –ü–∞—Ä—Å–∏–Ω–≥ ‚Üí –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (WireGuard)
    runs-on: ubuntu-latest
    env:
      WG_CONFIG: ${{ secrets.WG_CONFIG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîê Setup WireGuard
        run: |
          sudo apt-get update
          sudo apt-get install -y wireguard-tools jq
          
          mkdir -p $HOME/wg
          echo "$WG_CONFIG" > $HOME/wg/wg0.conf
          chmod 600 $HOME/wg/wg0.conf
          
          # –Ø–≤–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ DNS –≤ WG
          echo -e "\n[Interface]\nDNS = off" >> $HOME/wg/wg0.conf
          
          sudo wg-quick up $HOME/wg/wg0.conf
          
          # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ DNS
          echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf
          echo "nameserver 8.8.8.8" | sudo tee -a /etc/resolv.conf
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          ping -c 3 google.com

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements-parser.txt'

      - name: Install parser dependencies
        run: |
          set -ex  # –í–∫–ª—é—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
          if [ ! -f "requirements-parser.txt" ]; then
            echo "::error::–§–∞–π–ª requirements-parser.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è!"
            echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:"
            ls -la
            exit 1
          fi

          # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
          python -m pip install --upgrade pip

          # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –ø–æ–≤—Ç–æ—Ä–∞–º–∏
          for attempt in {1..5}; do
            echo "–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ‚Ññ$attempt"
            if pip install \
              --default-timeout=120 \
              -r requirements-parser.txt; then
              echo "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
              break
            else
              echo "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 20 —Å–µ–∫—É–Ω–¥..."
              sleep 20
              [ $attempt -eq 5 ] && exit 1
            fi
          done

          # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
          echo "=== –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã ==="
          pip list
          echo "=========================="

      - name: üß† Run parser
        run: python3 main.py --lang ru --posted-file articles/posted.json

      - name: Apply watermarks
        run: |
          pip install pillow==10.1.0
          python3 watermark_rotator.py

      - name: üõë Teardown WireGuard
        if: always()
        run: sudo wg-quick down $HOME/wg/wg0.conf || true

      - name: Upload parsed-content
        uses: actions/upload-artifact@v4
        with:
          name: parsed-content
          path: articles/*

  post:
    name: Publish new articles
    needs: parse
    runs-on: ubuntu-latest
    env:
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements-poster.txt'

      - name: Install poster requirements
        run: |
          set -ex
          pip install -r requirements-poster.txt

      - name: Download parsed-content
        uses: actions/download-artifact@v4
        with:
          name: parsed-content
          path: parsed_articles

      - name: Run poster
        run: |
          python3 poster.py \
            --parsed-dir parsed_articles \
            --state-file articles/posted.json \
            --limit $BATCH_LIMIT

      - name: Commit updated posted.json
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add articles/posted.json
          if ! git diff --cached --quiet; then
            git commit -m "chore: update posted catalog after posting"
            git push
          fi
