name: Parse & Post Articles
permissions:
  contents: write
on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  POST_DELAY: 5
  BATCH_LIMIT: 50

jobs:
  parse:
    name: Парсинг → артефакты (WireGuard)
    runs-on: ubuntu-latest
    env:
      WG_CONFIG: ${{ secrets.WG_CONFIG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Setup WireGuard & install jq
        run: |
          sudo apt-get update \
            && sudo apt-get install -y wireguard-tools resolvconf curl jq
          mkdir -p $HOME/wg
          echo "$WG_CONFIG" > $HOME/wg/wg0.conf
          chmod 600 $HOME/wg/wg0.conf
          sudo wg-quick up $HOME/wg/wg0.conf
          echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install parser requirements
        run: pip install -r requirements-parser.txt

      - name: 🧠 Run parser
        run: python3 main.py --lang ru --posted-file articles/posted.json

      - name: 🛑 Teardown WireGuard
        if: always()
        run: sudo wg-quick down $HOME/wg/wg0.conf || true

      - name: Upload parsed-content
        uses: actions/upload-artifact@v4
        with:
          name: parsed-content
          path: articles/*

  post:
    name: Publish new articles
    needs: parse
    runs-on: ubuntu-latest
    env:
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install poster requirements
        run: pip install -r requirements-poster.txt

      - name: Download parsed-content
        uses: actions/download-artifact@v4
        with:
          name: parsed-content
          path: parsed_articles

      - name: Run poster
        run: |
          python3 poster.py \
            --parsed-dir parsed_articles \
            --state-file articles/posted.json \
            --limit $BATCH_LIMIT

      - name: Commit updated posted.json
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add articles/posted.json
          if ! git diff --cached --quiet; then
            git commit -m "chore: update posted catalog after posting"
            git push
          fi
