name: Parse and Post

on:
  schedule:
    - cron: '0,30 22-23 * * *'
    - cron: '0,30 0-10 * * *'
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: parse-and-post-${{ github.ref }}
  cancel-in-progress: true

jobs:
  parse:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      WG_CONFIG:      ${{ secrets.WG_CONFIG }}

    steps:
      - uses: actions/checkout@v4

      - name: üì¶ Cache parser pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-parser-${{ hashFiles('requirements-parser.txt') }}

      - uses: actions/setup-python@v4
        with: {python-version: '3.x'}
      - run: pip3 install -r requirements-parser.txt

      - run: mkdir -p articles

      - name: üîê Setup WireGuard & install jq
        run: |
          sudo apt-get update \
            && sudo apt-get install -y --no-install-recommends wireguard-tools resolvconf curl jq
          echo "${WG_CONFIG}" > $HOME/wg/wg0.conf
          sudo wg-quick up $HOME/wg/wg0.conf

      - run: python3 main.py

      - if: always()
        run: sudo wg-quick down $HOME/wg/wg0.conf || true

      - name: ‚úÖ Validate and upload
        run: |
          jq empty articles/catalog.json
        uses: actions/upload-artifact@v4
        with:
          name: parsed-content
          path: articles

  post:
    needs: parse
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      TELEGRAM_TOKEN: ${ { secrets.TELEGRAM_TOKEN } }
      TELEGRAM_CHANNEL: ${ { secrets.TELEGRAM_CHANNEL } }
      BATCH_LIMIT: 5        # –ø—É–±–ª–∏–∫—É–µ–º –ø–æ 5 —Å—Ç–∞—Ç–µ–π –∑–∞ –∑–∞–ø—É—Å–∫
      POST_DELAY: 60        # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏, —Å

    steps:
      - name: üîÑ Checkout poster & assets
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          sparse-checkout: |
            poster.py

      - name: üì¶ Cache poster pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-poster-${{ hashFiles('requirements-poster.txt') }}

      - uses: actions/setup-python@v4
        with: {python-version: '3.x'}
      - run: |
          python -m pip install --upgrade pip
          pip3 install -r requirements-poster.txt

      - name: üì• Download parsed-content
        uses: actions/download-artifact@v4
        with:
          name: parsed-content
          path: articles

      - name: üêû Debug articles content
        run: ls -R articles

      - name: üìÅ Validate catalog.json
        run: |
          jq empty articles/catalog.json

      - name: üì§ Run poster (batch)
        run: |
          set -e
          python3 poster.py --limit ${{ env.BATCH_LIMIT }}

      - name: üìù Upload updated catalog
        uses: actions/upload-artifact@v4
        with:
          name: catalog-after-posting-${{ github.run_id }}
          path: articles/catalog.json
