name: Parse & Post Articles –ü—Ä–æ–¥—É–∫—Ç
concurrency:
  group: post-articles
  cancel-in-progress: false
  
permissions:
  contents: write
on:
  push:
    branches: [ main ]
  workflow_dispatch:
  schedule:
    - cron: '30 22 * * *'  # 5:30 UTC+7
    - cron: '0 23 * * *'   # 6:00
    - cron: '30 23 * * *'  # 6:30
    - cron: '0 0 * * *'    # 7:00
    - cron: '30 0 * * *'   # 7:30
    - cron: '0 1 * * *'    # 8:00
    - cron: '30 1 * * *'   # 8:30
    - cron: '0 2 * * *'    # 9:00
    - cron: '30 2 * * *'   # 9:30
    - cron: '0 3 * * *'    # 10:00
    - cron: '30 3 * * *'   # 10:30
    - cron: '0 4 * * *'    # 11:00
    - cron: '30 4 * * *'   # 11:30
    - cron: '0 5 * * *'    # 12:00
    - cron: '30 5 * * *'   # 12:30
    - cron: '0 6 * * *'    # 13:00
    - cron: '30 6 * * *'   # 13:30
    - cron: '0 7 * * *'    # 14:00
    - cron: '30 7 * * *'   # 14:30
    - cron: '0 8 * * *'    # 15:00
    - cron: '30 8 * * *'   # 15:30
    - cron: '0 9 * * *'    # 16:00
    - cron: '30 9 * * *'   # 16:30
    - cron: '0 10 * * *'   # 17:00
    - cron: '30 10 * * *'  # 17:30
    - cron: '0 11 * * *'   # 18:00
    - cron: '30 11 * * *'  # 18:30
    
env:
  POST_DELAY: 10
  BATCH_LIMIT: 30

jobs:

  parse:
    name: –ü–∞—Ä—Å–∏–Ω–≥ ‚Üí –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã (WireGuard)
    runs-on: ubuntu-latest
    env:
      WG_CONFIG: ${{ secrets.WG_CONFIG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-parser.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install parser requirements
        run: |
          if [ -f requirements-parser.txt ]; then
            pip install -r requirements-parser.txt
          fi

      - name: üîê Setup WireGuard & install jq
        run: |
          sudo apt-get update \
            && sudo apt-get install -y wireguard-tools resolvconf curl jq
          mkdir -p $HOME/wg
          # –ü–∏—à–µ–º –∫–æ–Ω—Ñ–∏–≥ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ base64‚Äêdecode
          echo "$WG_CONFIG" > $HOME/wg/wg0.conf
          chmod 600 $HOME/wg/wg0.conf
          sudo wg-quick up $HOME/wg/wg0.conf
          echo "nameserver 1.1.1.1" | sudo tee /etc/resolv.conf
 
      - name: Run parser
        run: |
          echo "‚Üí STARTING PARSER RUN" # –î–æ–±–∞–≤–ª–µ–Ω–æ: –º–∞—Ä–∫–µ—Ä –Ω–∞—á–∞–ª–∞
          python3 -u main.py # –î–æ–±–∞–≤–ª–µ–Ω–æ: —Ñ–ª–∞–≥ -u –¥–ª—è –Ω–µ–±—É—Ñ–µ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
            --lang ${{ inputs.lang || 'ru' }}
            --limit ${{ env.BATCH_LIMIT_PARSE || 10 }}
            --posted-state-file articles/posted.json
          echo "‚Üí PARSER RUN COMPLETE" # –î–æ–±–∞–≤–ª–µ–Ω–æ: –º–∞—Ä–∫–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è 

        
      - name: üõë Teardown WireGuard
        if: always()
        run: sudo wg-quick down $HOME/wg/wg0.conf || true

      - name: Debug all files
        run: ls -R

      - name: Debug parser output
        run: |
          echo "‚Üí Tree of generated articles/:"
          ls -R articles

      - name: Upload parsed-content
        uses: actions/upload-artifact@v4
        with:
          name: parsed-content
          path: articles/*

  post:
    name: Publish new articles
    needs: parse
    runs-on: ubuntu-latest
    env:
      TELEGRAM_TOKEN:   ${{ secrets.TELEGRAM_TOKEN }}
      TELEGRAM_CHANNEL: ${{ secrets.TELEGRAM_CHANNEL }}

    steps:
      - name: Checkout repo (contains empty catalog.json)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python for poster
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-poster.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install poster requirements
        run: |
          pip install -r requirements-poster.txt

      - name: Download parsed-content
        uses: actions/download-artifact@v4
        with:
          name: parsed-content
          path: parsed_articles

      - name: Debug parsed_articles
        run: |
          echo "‚Üí Tree of parsed_articles/:"
          ls -R parsed_articles

      - name: Run poster
        run: |
          echo "‚Üí Running poster against parsed_articles"
          python3 poster.py \
            --parsed-dir parsed_articles \
            --state-file articles/posted.json \
            --limit $BATCH_LIMIT

      - name: Debug articles after poster
        run: |
          echo "‚Üí Tree of articles/ after poster run:"
          ls -R articles

      - name: Commit updated posted.json
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add articles/posted.json
          if ! git diff --cached --quiet; then
            git commit -m "chore: update posted catalog after posting"
            git push
          else
            echo "‚úÖ posted.json unchanged"
          fi
