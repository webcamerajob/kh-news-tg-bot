#!/usr/bin/env python3
import os
import json
import argparse
import asyncio
import logging
import re
from typing import Any, Dict, List, Optional, Tuple
from pathlib import Path
from io import BytesIO

import httpx
from httpx import HTTPStatusError, ReadTimeout, Timeout
from PIL import Image

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s"
)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

HTTPX_TIMEOUT = Timeout(connect=10.0, read=60.0, write=10.0, pool=5.0)
MAX_RETRIES   = 3
RETRY_DELAY   = 5.0
DEFAULT_DELAY = 5.0

# –ü—É—Ç—å –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É state-—Ñ–∞–π–ª—É –≤ —Ä–µ–ø–æ
STATE_PATH = Path("articles/catalog.json")


def escape_markdown(text: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.
    """
    markdown_chars = r'\_*[]()~`>#+-=|{}.!'
    return re.sub(r'([%s])' % re.escape(markdown_chars), r'\\\1', text)


def chunk_text(
    text: str,
    size: int = 4096,
    preserve_formatting: bool = True
) -> List[str]:
    """
    –î–µ–ª–∏—Ç text –Ω–∞ —á–∞–Ω–∫–∏ –¥–ª–∏–Ω–æ–π <= size.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫ –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤.
    """
    norm = text.replace('\r\n', '\n')
    paras = [p for p in norm.split('\n\n') if p.strip()]
    if not preserve_formatting:
        paras = [re.sub(r'\n+', ' ', p) for p in paras]

    chunks, curr = [], ""
    def _split_long(p: str) -> List[str]:
        parts, sub = [], ""
        for w in p.split(" "):
            if len(sub) + len(w) + 1 > size:
                parts.append(sub)
                sub = w
            else:
                sub = (sub + " " + w).lstrip()
        if sub:
            parts.append(sub)
        return parts

    for p in paras:
        if len(p) > size:
            if curr:
                chunks.append(curr)
                curr = ""
            chunks.extend(_split_long(p))
        else:
            if not curr:
                curr = p
            elif len(curr) + 2 + len(p) <= size:
                curr += "\n\n" + p
            else:
                chunks.append(curr)
                curr = p

    if curr:
        chunks.append(curr)
    return chunks


def apply_watermark(img_path: Path, scale: float = 0.45) -> bytes:
    """
    –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç watermark.png (45% —à–∏—Ä–∏–Ω—ã) –≤ –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    base = Image.open(img_path).convert("RGBA")
    wm = Image.open("watermark.png").convert("RGBA")
    try:
        filt = Image.Resampling.LANCZOS
    except AttributeError:
        filt = Image.LANCZOS
    ratio = base.width * scale / wm.width
    wm = wm.resize((int(wm.width * ratio), int(wm.height * ratio)), resample=filt)
    base.paste(wm, (base.width - wm.width, 0), wm)
    buf = BytesIO()
    base.convert("RGB").save(buf, "PNG")
    return buf.getvalue()


async def _post_with_retry(
    client: httpx.AsyncClient,
    method: str,
    url: str,
    data: Dict[str, Any],
    files: Optional[Dict[str, Any]] = None
) -> bool:
    """
    HTTP POST —Å retry: 4xx ‚Äì –±–µ–∑ retry, 5xx/timeout ‚Äì retry.
    """
    for attempt in range(1, MAX_RETRIES + 1):
        try:
            resp = await client.request(
                method, url, data=data, files=files, timeout=HTTPX_TIMEOUT
            )
            resp.raise_for_status()
            return True

        except ReadTimeout:
            logging.warning("‚è± Timeout %s/%s for %s", attempt, MAX_RETRIES, url)

        except HTTPStatusError as e:
            code = e.response.status_code
            if 400 <= code < 500:
                logging.error("‚ùå %s %s: %s", method, code, e.response.text)
                return False
            logging.warning("‚ö†Ô∏è %s %s, retrying %s/%s", method, code, attempt, MAX_RETRIES)

        await asyncio.sleep(RETRY_DELAY)

    logging.error("‚ò†Ô∏è Failed %s after %s attempts", url, MAX_RETRIES)
    return False


async def send_media_group(
    client: httpx.AsyncClient,
    token: str,
    chat_id: str,
    images: List[Path],
    caption: str,
    use_caption=False
) -> bool:
    """
    –ê–ª—å–±–æ–º —Ñ–æ—Ç–æ –≤ Telegram. Caption —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–æ—Ç–æ.
    """
    url = f"https://api.telegram.org/bot{token}/sendMediaGroup"
    media, files = [], {}
    for idx, img in enumerate(images):
        key = f"photo{idx}"
        files[key] = (img.name, apply_watermark(img), "image/png")
        item = {"type": "photo", "media": f"attach://{key}"}
        if idx == 0 and use_caption:
            item["caption"] = escape_markdown(caption)
            item["parse_mode"] = "MarkdownV2"
        media.append(item)

    data = {"chat_id": chat_id, "media": json.dumps(media, ensure_ascii=False)}
    return await _post_with_retry(client, "POST", url, data, files)


async def send_message(
    client: httpx.AsyncClient,
    token: str,
    chat_id: str,
    text: str
) -> bool:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    data = {
        "chat_id": chat_id,
        "text": escape_markdown(text),
        "parse_mode": "MarkdownV2"
    }
    return await _post_with_retry(client, "POST", url, data)


def validate_article(art: Dict[str, Any]) -> Optional[Tuple[str, Path, List[Path]]]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç title, text_file –∏ images ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (caption, text_path, images).
    """
    title = art.get("title")
    txt   = art.get("text_file")
    imgs  = art.get("images", [])

    if not title or not isinstance(title, str):
        logging.error("Missing or invalid title in article %s", art.get("id"))
        return None
    if not txt or not Path(txt).is_file():
        logging.error("Missing or invalid text_file in article %s", art.get("id"))
        return None
    valid_imgs = [Path(p) for p in imgs if Path(p).is_file()]
    if not valid_imgs:
        logging.error("No valid images for article %s", art.get("id"))
        return None

    raw = title.strip()
    cap = raw if len(raw) <= 1024 else raw[:1023] + "‚Ä¶"
    return escape_markdown(cap), Path(txt), valid_imgs


async def main(limit: Optional[int]):
    token   = os.getenv("TELEGRAM_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHANNEL")
    if not token or not chat_id:
        logging.error("TELEGRAM_TOKEN or TELEGRAM_CHANNEL not set")
        return

    delay = float(os.getenv("POST_DELAY", DEFAULT_DELAY))

    # 1) –ó–∞–≥—Ä—É–∂–∞–µ–º —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ ID –∏–∑ —Ä–µ–ø–æ-state
    posted_ids = set()
    if STATE_PATH.is_file():
        try:
            posted_ids = {item["id"] for item in json.loads(
                STATE_PATH.read_text(encoding="utf-8")
            ) if "id" in item}
            logging.info("Loaded %d posted IDs from state", len(posted_ids))
        except Exception as e:
            logging.warning("Failed to read state-file %s: %s", STATE_PATH, e)
    else:
        logging.info("%s not found, will post all parsed articles", STATE_PATH)

    # 2) –°–∫–∞–Ω–∏—Ä—É–µ–º parsed-content (–∞—Ä—Ç–µ—Ñ–∞–∫—Ç) ‚Üí —Å–æ–±–∏—Ä–∞–µ–º meta.json –∏–∑ –ø–∞–ø–æ–∫
    parsed_articles: List[Dict[str, Any]] = []
    for art_dir in sorted(Path("articles").iterdir()):
        meta_file = art_dir / "meta.json"
        if art_dir.is_dir() and meta_file.is_file():
            try:
                parsed_articles.append(json.loads(
                    meta_file.read_text(encoding="utf-8")
                ))
            except Exception as e:
                logging.warning("Failed to load meta for %s: %s", art_dir, e)

    client = httpx.AsyncClient(timeout=HTTPX_TIMEOUT)
    sent = 0

    # 3) –ü—É–±–ª–∏–∫—É–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
    for art in parsed_articles:
        aid = art.get("id")
        if aid in posted_ids:
            logging.info("Skipping already posted article %s", aid)
            continue
        if limit and sent >= limit:
            break

        validated = validate_article(art)
        if not validated:
            continue
        caption, text_path, images = validated

        if not await send_media_group(
            client, token, chat_id, images, caption, use_caption=True
        ):
            continue

        raw    = text_path.read_text(encoding="utf-8")
        chunks = chunk_text(raw, size=4096)
        body   = chunks[1:] if len(chunks) > 1 else chunks
        for part in body:
            await send_message(client, token, chat_id, part)

        posted_ids.add(aid)
        sent += 1
        logging.info("‚úÖ Posted ID=%s", aid)
        await asyncio.sleep(delay)

    await client.aclose()

    # 4) –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º minimal-state —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö
    minimal = [
        {"id": art["id"], "hash": art["hash"], "translated_to": art.get("translated_to", "")}
        for art in parsed_articles
        if art.get("id") in posted_ids
    ]
    try:
        STATE_PATH.write_text(
            json.dumps(minimal, ensure_ascii=False, indent=2),
            encoding="utf-8"
        )
        logging.info("State saved to %s", STATE_PATH)
    except Exception as e:
        logging.error("Failed to save state-file %s: %s", STATE_PATH, e)

    logging.info("üì¢ Done: sent %d articles", sent)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Poster: –ø—É–±–ª–∏–∫—É–µ—Ç —Å—Ç–∞—Ç—å–∏ –ø–∞–∫–µ—Ç–∞–º–∏")
    parser.add_argument(
        "-n", "--limit", type=int, default=None,
        help="–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
    )
    args = parser.parse_args()
    asyncio.run(main(limit=args.limit))
```
